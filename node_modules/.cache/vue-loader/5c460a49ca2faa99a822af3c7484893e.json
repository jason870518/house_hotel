{"remainingRequest":"C:\\Users\\User\\Desktop\\Project\\hotel\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\User\\Desktop\\Project\\hotel\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\User\\Desktop\\Project\\hotel\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\Project\\hotel\\src\\views\\Information.vue?vue&type=template&id=5c5c16e2&scoped=true&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Project\\hotel\\src\\views\\Information.vue","mtime":1591813981116},{"path":"C:\\Users\\User\\Desktop\\Project\\hotel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Project\\hotel\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Project\\hotel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Project\\hotel\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}